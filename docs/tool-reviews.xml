<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Isaac Flath</title>
<link>https://elite-ai-assisted-coding.dev/tool-reviews.html</link>
<atom:link href="https://elite-ai-assisted-coding.dev/tool-reviews.xml" rel="self" type="application/rss+xml"/>
<description>One Stop Shop for Information on Context Engineering for Coding</description>
<image>
<url>https://elite-ai-assisted-coding.dev/static/default-social.png</url>
<title>Isaac Flath</title>
<link>https://elite-ai-assisted-coding.dev/tool-reviews.html</link>
<height>81</height>
<width>144</width>
</image>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Mon, 28 Jul 2025 04:00:00 GMT</lastBuildDate>
<item>
  <title>AMP Code Agent Tool Review</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://elite-ai-assisted-coding.dev/tools-review/amp.html</link>
  <description><![CDATA[ 





<p>I decided to try AMP, a new AI agent tool. I gave it a real-world task: creating the “Layouts Concepts” documentation for a new open-source web framework called Air. This involved both coding (because I needed to understand it myself by building some examples) and then actually writing the documentation on it. It was something that I actually needed to get done, making it a nice realistic task to test whether it could be useful to me. The PR was accepted and merged.</p>
<p>This review covers the entire process, from setting up AMP and generating a working application to writing the final documentation and seeing diffs and explaining what I needed to do myself and how editing the Agent’s output felt.</p>
<p>TLDR: It was a very powerful coding tool that did much better than I expected and is worth trying.</p>
    <a href="https://maven.com/kentro/context-engineering-for-coding?promoCode=ISAAC"><img src="https://elite-ai-assisted-coding.dev/static/CourseCard.jpg" style="width: 100%; height: auto; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.08); max-width: 700px; margin: 2em 0;" alt="Course Card">
    </a>
    <a href="https://maven.com/kentro/context-engineering-for-coding?promoCode=ISAAC" class="btn btn-primary btn-lg" style="font-size: 1.15rem; border-radius: 8px; font-weight: 600; padding: 0.8em 1.5em; margin: 2em;">
      <b>Enroll Now on Maven →</b>
    </a>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/rWGGPJSnxI0" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<section id="getting-started-with-amp" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-amp">Getting Started with AMP</h2>
<p>Setting up AMP was easy. It offers integrations for VS Code, Cursor, and a CLI. Since I’ve been using Cursor a lot lately, I opted for that extension [00:00:15].</p>
<p>AMP provides a $10 free tier to get started, which is what I used for this project. The entire task ended up costing $4.10 of that credit [00:00:21].</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_00_18.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 00:18</figcaption>
</figure>
</div>
</section>
<section id="the-task-creating-a-layout-concept-guide-for-air" class="level2">
<h2 class="anchored" data-anchor-id="the-task-creating-a-layout-concept-guide-for-air">The Task: Creating a Layout Concept Guide for Air</h2>
<p>Air is a new web development framework. It’s brand new and currently in alpha [00:00:33]. This means it’s not in the training data of any major AI models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_00_33.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 00:33</figcaption>
</figure>
</div>
</section>
<section id="porting-fasthtml-examples" class="level2">
<h2 class="anchored" data-anchor-id="porting-fasthtml-examples">Porting FastHTML Examples</h2>
<p>To get started, I needed to get familiar with common web-dev patterns inside of Air. I decided to port a to-do application I had previously built for a talk on the FastHTML framework [00:01:24]. The talk demonstrated various ways to structure a project, from a single file to more complex patterns using API routers and showed 4 different approaches [00:02:03].</p>
<p>I gave AMP the task of rewriting these FastHTML examples for Air, providing it with both projects in my workspace.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_01_42.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 01:42</figcaption>
</figure>
</div>
</section>
<section id="amp-in-action-code-generation" class="level2">
<h2 class="anchored" data-anchor-id="amp-in-action-code-generation">AMP in Action: Code Generation</h2>
<p>I described what I wanted and pointed AMP to the repositories. It was able to see both directories in my workspace and looked through the source code of both. [00:02:36].</p>
<p>It didn’t do anything malicious, but I don’t remember giving it any permissions and it started making files and editing them. It caught me a bit by surprise, but also meant that I moved faster than I would have otherwise. I was a bit worried about it in the moment, but given the results I think it saved me quite a bit of time.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_02_30.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 02:30</figcaption>
</figure>
</div>
<p>A second thing that irked me initially was the default of <code>enter</code> being to create a new line in the prompt rather than submitting. By the end of the process I began to appreciate that, because it meant more natural creation of more detailed prompts and instructions. It’s an unsual design choice, but I think it’s a good one.</p>
</section>
<section id="debugging-with-amp" class="level2">
<h2 class="anchored" data-anchor-id="debugging-with-amp">Debugging with AMP</h2>
<p>The first version of the generated app ran, but writing to the database was failing [00:03:00]. I copied the server logs, fed them back to AMP, and asked it to fix the problem.</p>
<p>It successfully identified the issue from the logs and fixed the database write errors on the first try [00:03:06].</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_03_06.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 03:06</figcaption>
</figure>
</div>
</section>
<section id="the-generated-todo-app" class="level2">
<h2 class="anchored" data-anchor-id="the-generated-todo-app">The Generated Todo App</h2>
<p>I had a fully working application. It’s a project-based to-do app where you can create projects, and within each project, you can add, edit, and delete tasks [00:03:24]. It handles due dates, highlighting overdue tasks in red and other small styling features.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_03_39.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 03:39</figcaption>
</figure>
</div>
<p>The app was had minor UI bug where a “done” checkbox was always checked but otherwise was functional [00:03:48].</p>
</section>
<section id="code-review-api-router-implementation" class="level2">
<h2 class="anchored" data-anchor-id="code-review-api-router-implementation">Code Review: API Router Implementation</h2>
<p>Air is built on top of FastAPI, so it can use FastAPI’s <code>API Router</code> pattern directly [00:04:27]. AMP correctly identified this and structured the code accordingly, creating separate router files and including them in the main application file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># main.py</span></span>
<span id="cb1-2">...</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> .domain.projects.router <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> router <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> projects_router</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> .domain.todos.router <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> router <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> todos_router</span>
<span id="cb1-6"></span>
<span id="cb1-7">...</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Include routers from other files</span></span>
<span id="cb1-10">app.include_router(projects_router)</span>
<span id="cb1-11">app.include_router(todos_router)</span></code></pre></div>
<p>It also added some helpful sample data and logging, complete with the typical AI-generated emojis [00:04:51].</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_04_54.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 04:54</figcaption>
</figure>
</div>
</section>
<section id="database-implementation-analysis" class="level2">
<h2 class="anchored" data-anchor-id="database-implementation-analysis">Database Implementation Analysis</h2>
<p>The original FastHTML examples used a library called <code>FastLite</code>. AMP translated these operations into raw SQL strings [00:05:09]. While this isn’t the most robust solution, it’s clear and understandable. I didn’t ask for an ORM, so this was a reasonable choice for educational material.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_05_03.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 05:03</figcaption>
</figure>
</div>
<p>However, some of the code it produced felt a bit fragile, like using integer indexing to access database columns [00:05:36]. It’s a minor complaint, but something I’d refactor in a real production app.</p>
</section>
<section id="css-and-ui-decisions" class="level2">
<h2 class="anchored" data-anchor-id="css-and-ui-decisions">CSS and UI Decisions</h2>
<p>The original examples used a custom CSS framework I built called Monster UI, which is specific to FastHTML [00:06:15]. This framework wouldn’t work with Air and it chose to use raw CSS to style the components [00:06:24]. I liked that choice as it kept it simple rather than pulling in a different UI framework.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_06_24.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 06:24</figcaption>
</figure>
</div>
</section>
<section id="documentation-writing-phase" class="level2">
<h2 class="anchored" data-anchor-id="documentation-writing-phase">Documentation Writing Phase</h2>
<p>Now that I understood how layouts could be useful, I moved on to writing the documentation [00:06:48]. I prompted AMP to create a “Layouts Concepts Guide” based on the patterns we had just implemented.</p>
<p>The final result, after some manual editing, was a clean, well-structured guide that was merged into the official Air documentation [00:07:03]. It starts with the core philosophy, explains the built-in layouts, and then details how to create more advanced, custom layout patterns.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_07_00.png" class="img-fluid figure-img"></p>
<figcaption>Overview of the merged PR and the structure of the layouts guide</figcaption>
</figure>
</div>
</section>
<section id="manual-refinements-required" class="level2">
<h2 class="anchored" data-anchor-id="manual-refinements-required">Manual Refinements Required</h2>
<p>AMP’s first draft wasn’t perfect, and I wouldn’t expect it to be. The agent did a good job on the core content but then kept going, adding sections on error pages, form patterns, and other concepts that were out of scope for this specific guide [00:07:42]. That’s great, because I gave it vague instructions and it did a great job of giving me something I could work with and curate to my liking quickly.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_07_45.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 07:45</figcaption>
</figure>
</div>
<p>My main task was simplification. I deleted large chunks of irrelevant content from the end of the document [00:08:03]. I also minimized the code examples by removing boilerplate and consolidated multiple, near-identical examples into a single, clearer one [00:08:36].</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_07_39.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 07:39</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/amp/screenshot_08_54.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot at 08:54</figcaption>
</figure>
</div>
<p>This editing process was far more efficient than starting from scratch.</p>
</section>
<section id="final-verdict" class="level2">
<h2 class="anchored" data-anchor-id="final-verdict">Final Verdict</h2>
<p>Overall, I was pretty happy with AMP’s performance. For the coding task, it was incredibly helpful and significantly faster than I would have been. For the documentation writing, it was really helpful and sped me up but I am not convinced it was any better than Claude Opus or Gemini 2.5 Pro using claude code or the gemini CLI.</p>
<p>Overall, Amp was useful for this task.</p>


</section>

 ]]></description>
  <category>Coding Agent</category>
  <guid>https://elite-ai-assisted-coding.dev/tools-review/amp.html</guid>
  <pubDate>Mon, 28 Jul 2025 04:00:00 GMT</pubDate>
  <media:content url="https://elite-ai-assisted-coding.dev/static/AmpToolReview.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Gemini CLI Tool Review</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://elite-ai-assisted-coding.dev/tools-review/gemini-cli.html</link>
  <description><![CDATA[ 





<p>For the next tool review in my series, I decided to use the Gemini CLI.</p>
<section id="the-task" class="level2">
<h2 class="anchored" data-anchor-id="the-task">The Task</h2>
<p>My desktop is cluttered with ~ a billion unnamed screenshots and screen recordings. I’ve wanted to clean them for a while, but renaming them is a huge pain.</p>
<p>Because the Gemini models are to be the best at multimodal tasks like image and video, Gemini CLI felt like it should be a good choice. I decided to tackle this in 2 phases:</p>
<ol type="1">
<li>Try using the Gemini CLI out of the box to rename this files with 0 effort by looking at image and video content.</li>
<li>Create a desktop app that has file navigations and single vs bulk file renaming to make a genral solution.</li>
</ol>
<p>That way I should get a good feel for the tool’s capabilities and learn a bit about building a desktop app. This review is part of my research for my “AI Assisted Coding” course, where I teach how to get the most out of AI tools.</p>
    <a href="https://maven.com/kentro/context-engineering-for-coding?promoCode=ISAAC"><img src="https://elite-ai-assisted-coding.dev/static/CourseCard.jpg" style="width: 100%; height: auto; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.08); max-width: 700px; margin: 2em 0;" alt="Course Card">
    </a>
    <a href="https://maven.com/kentro/context-engineering-for-coding?promoCode=ISAAC" class="btn btn-primary btn-lg" style="font-size: 1.15rem; border-radius: 8px; font-weight: 600; padding: 0.8em 1.5em; margin: 2em;">
      <b>Enroll Now on Maven →</b>
    </a>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/QajG6YLoF5A" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="the-messy-desktop" class="level2">
<h2 class="anchored" data-anchor-id="the-messy-desktop">The Messy Desktop</h2>
<p>As you can see, I have a lot of unnamed screenshots and I have no idea what they are. I’ve tried to rewrite them but it’s a pain so I didn’t get far [00:01:09]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/0-file-list-2025-07-03-to-2025-07-23.png" class="img-fluid figure-img"></p>
<figcaption>A list of files with generic names like “Screenshot 2025-07-23…”</figcaption>
</figure>
</div>
</section>
<section id="using-the-gemini-cli-for-renaming" class="level2">
<h2 class="anchored" data-anchor-id="using-the-gemini-cli-for-renaming">Using the Gemini CLI for Renaming</h2>
<p>I fired up the Gemini CLI and gave it the task of renaming the files without any code. [00:01:24] I was pleased to see that it did a great job of analyzing the content of the images and videos and suggesting meaningful names.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/1-gemini-terminal-screenshot.png" class="img-fluid figure-img"></p>
<figcaption>Gemini CLI terminal showing the model analyzing screenshots</figcaption>
</figure>
</div>
<p>The CLI renamed a batch of files, and the new names were descriptive and accurate. [00:01:42]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/2-five-screenshots-renamed.png" class="img-fluid figure-img"></p>
<figcaption>Five screenshots renamed with descriptive names</figcaption>
</figure>
</div>
<p>Here’s another example of the CLI renaming a screenshot with a descriptive name. [00:01:39]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/3-rename-screenshot-example.png" class="img-fluid figure-img"></p>
<figcaption>A screenshot being renamed by the Gemini CLI</figcaption>
</figure>
</div>
<p>The tool also handled video files (<code>.mov</code>) just as effectively as images. [00:02:00]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/3-screen-recordings-analysis-rename.png" class="img-fluid figure-img"></p>
<figcaption>The Gemini CLI analyzing and renaming screen recordings</figcaption>
</figure>
</div>
<p>It didn’t keep track of the work progress well however. I found that the CLI would sometimes stop a lot before completing the entire task, and I had to remind it to do a <code>ls | grep Screenshot</code> of the directory to see if there’s more to do to get it to continue. [00:02:15]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/4-terminal-screenshot-list-2025-07-06.png" class="img-fluid figure-img"></p>
<figcaption>A terminal screenshot showing a list of remaining files to be renamed</figcaption>
</figure>
</div>
</section>
<section id="building-a-desktop-app-with-the-gemini-cli" class="level2">
<h2 class="anchored" data-anchor-id="building-a-desktop-app-with-the-gemini-cli">Building a Desktop App with the Gemini CLI</h2>
<p>Once I confirmed that the core functionality was possible, I moved on to building a desktop application to make this renaming process easier in the future. I hadn’t built a desktop app before, so this was fun.</p>
<p>A feature I particularly liked was the ability to modify the proposed changes in an external editor before applying them. [00:03:09] This gave me more a bit more control.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/5-external-editor-prompt.png" class="img-fluid figure-img"></p>
<figcaption>The Gemini CLI prompt to modify a diff in an external editor</figcaption>
</figure>
</div>
<p>I chose to open in cursor, and it gave me an editable diff view I could modify before the changes are applied.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/6-python-folder-selection-code-snippet.png" class="img-fluid figure-img"></p>
<figcaption>A Python code snippet for folder selection</figcaption>
</figure>
</div>
<p>The Gemini CLI also generated a plan for the application before it started coding, which is nice. Claude Code and many other tools do this too. But it’s still nice. [00:03:33]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/10-AI-File-Renamer-Plan.png" class="img-fluid figure-img"></p>
<figcaption>The AI’s plan for the file renamer application</figcaption>
</figure>
</div>
<p>The end result was a functional-ish, but very buggy, desktop application. I was able to select a directory, have the AI suggest new names for the files, and then apply those names. [00:03:54]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/11-AI-File-Renamer-Screenshot.png" class="img-fluid figure-img"></p>
<figcaption>The AI-generated file renamer application</figcaption>
</figure>
</div>
<p>The application included logging, which was helpful. [00:04:42]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/12-AI-file-renamer-log.png" class="img-fluid figure-img"></p>
<figcaption>The log file for the AI file renamer application</figcaption>
</figure>
</div>
</section>
<section id="code-quality-and-bugs" class="level2">
<h2 class="anchored" data-anchor-id="code-quality-and-bugs">Code Quality and Bugs</h2>
<p>While the app “worked,” it had several major bugs.</p>
<ul>
<li>I couldn’t select individual files, and the app would often hang after processing one directory. [00:04:06]</li>
<li>After doing it’s first bulk rename operation it would somehow get into a state where no additional renamings would work so the whole app would need to be restarted. There were no errors logged.</li>
</ul>
<p>When I dove into the code more carefully, I found the common AI code culprits such as overuse of generic <code>try...except</code> blocks that would catch exceptions and simply print them to the console. [00:04:57] This hides bugs and make the application less robust and harder to fix but appear to work at a glance.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/tools-review/gemini-cli/12-Exception-Handlers.png" class="img-fluid figure-img"></p>
<figcaption>A code snippet showing generic exception handlers</figcaption>
</figure>
</div>
</section>
<section id="final-thoughts" class="level1">
<h1>Final Thoughts</h1>
<p>Overall, I have found the Gemini CLI to be pretty useful, especially for multimodal tasks like analyzing images and videos. [00:06:36] Its ability to generate descriptive names for my screenshots and videos with 0 effort was really nice. The code it generated for the desktop application was a good starting point and a valuable learning tool, I don’t really think it’s better than claude code.</p>
<p>The code was understandable enough and I followed along with the code generation process enough that I understood what it was doing a learned a bit about making a desktop app. However, if I were to build a desktop app for this for real I would start over rather than continue to work with this code.</p>
<p>While not included in this use, for tasks like content creation, writing, and quick, one-off multimodal tasks, Gemini is fantastic. For software development, I think there are better options.</p>


</section>

 ]]></description>
  <category>Terminal Agent</category>
  <guid>https://elite-ai-assisted-coding.dev/tools-review/gemini-cli.html</guid>
  <pubDate>Thu, 24 Jul 2025 04:00:00 GMT</pubDate>
  <media:content url="https://elite-ai-assisted-coding.dev/static/GeminiCliToolReview.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Cursor Tool Review</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://elite-ai-assisted-coding.dev/tools-review/cursor.html</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>A technical reference for Cursor’s AI-assisted development features</p>
</blockquote>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Cursor is a fork of VS Code that integrates AI assistance throughout the development workflow. It is worth trying because it is a full IDE that gives a great diff experience on AI changes, and is very aggressive with the AI assistance. Cursor is one of the tools I use day-to-day for coding and it’s a great tool.</p>
    <a href="https://maven.com/kentro/context-engineering-for-coding?promoCode=ISAAC"><img src="https://elite-ai-assisted-coding.dev/static/CourseCard.jpg" style="width: 100%; height: auto; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.08); max-width: 700px; margin: 2em 0;" alt="Course Card">
    </a>
    <a href="https://maven.com/kentro/context-engineering-for-coding?promoCode=ISAAC" class="btn btn-primary btn-lg" style="font-size: 1.15rem; border-radius: 8px; font-weight: 600; padding: 0.8em 1.5em; margin: 2em;">
      <b>Enroll Now on Maven →</b>
    </a>
</section>
<section id="top-ide-features" class="level1">
<h1>Top IDE Features</h1>
<section id="tab-completion" class="level2">
<h2 class="anchored" data-anchor-id="tab-completion">Tab Completion</h2>
<p>Cursor’s completions use project-wide context rather than just the current file and are very aggressive, which is good in some situations and annoying in others.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Helpful Use Case">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Helpful Use Case
</div>
</div>
<div class="callout-body-container callout-body">
<p>I was doing an <a href="https://github.com/feldroy/air/pull/143/files#diff-e14fd0d1e563b32e21626eaeba650c79ce24651dfe03c83a5d977372384ff8ec">OSS PR to add type hints</a> to a new web development framework called <code>air</code> (very repetitive task). These needed to be matched up to a HTML reference documentation, and agents kept leaving off or added tags. Cursor’s tab comletion let me copy/paste from reference docs then hit tab for it to tab complete and modify to python syntax very quickly. It got the pattern after the first couple and let me get through it all in very little time.</p>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled" title="Unhelpful Use Case">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Unhelpful Use Case
</div>
</div>
<div class="callout-body-container callout-body">
<p>I was working on creating examples for a workshop I was teaching on <a href="https://github.com/kentro-tech/fasthtml-routes-and-syntax-ws/tree/main">FastHTML Syntax and Project Organization</a>. The tab completion was extremely annoying, because it was project wide it kept trying to autocomplete and change my code to what I did somewhere else. I felt like I was fighting the tab completion constantly and having to keep telling it to go away A LOT because I had a very specific thing in mind I wanted to do.</p>
</div>
</div>
</section>
<section id="chatagent-interface-cmdl-cmdi" class="level2">
<h2 class="anchored" data-anchor-id="chatagent-interface-cmdl-cmdi">Chat/Agent Interface (<code>Cmd+L</code> <code>Cmd+I</code>)</h2>
<p>Context-aware chat that understands project structure. This is pretty helpful with being able to easily reference lots of things with the <code>@</code> syntax for files. If you have code highlighted when you engage it that will be included in context specifically, and open files will also be in context for you.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Usage Tip">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Usage Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>I find it really helpful to dump lots of things in a <code>ref</code> folder then <code>@</code> like everything useful as I go. This can be tutorials I found online, docs, etc. I can <code>@</code> the URL directly, but the <code>ref</code> folder serves as an aggregator for me that’s a bit easier to keep top of mind and curate as needed than the cursor docs feature IMO.</p>
</div>
</div>
<p>The Agent gives many options and you get really nice diffs that you can individually review, or accept all, and you can restore back to checkpoints if you accepted changes that you find don’t work well after testing.</p>
</section>
<section id="inline-editor-cmdk" class="level2">
<h2 class="anchored" data-anchor-id="inline-editor-cmdk">Inline Editor (<code>Cmd+K</code>)</h2>
<p>Edit code in place with AI assistance <code>Cmd+K</code>. This lets you target specific pieces of code to edit. This is extremely helpful for limiting the scope of AI, especially when it’s trying to do too much or you know exactly where the change should happen.</p>
<p>I often use this to quickly ask it to write a doc string for documentation, or to do things like refactor a hairy logic stuck iside loops or conditionals into functions.</p>
</section>
<section id="terminal-helped-also-cmdk" class="level2">
<h2 class="anchored" data-anchor-id="terminal-helped-also-cmdk">Terminal helped (also <code>Cmd+K</code>)</h2>
<p>In your terminal you can select <code>Cmd+K</code> to have an AI assist that sees that terminals history. This is super helpful for lots of things, like telling you how to run things, git commands you’ve forgotten, telling it to do some curl command you don’t remember all the flags you need, etc.</p>
<p>The <strong>really</strong> nice thing about <code>Cmd+K</code> is it’s very controlled, so it puts the command in your terminal but YOU must run it. This makes it nice because I can ask it to help with even fairly risk things because it won’t be running anything on it’s own.</p>
</section>
<section id="cursor-rules" class="level2">
<h2 class="anchored" data-anchor-id="cursor-rules">Cursor Rules</h2>
<p>Cursor Rules are extremely helpful and there’s 4 modes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://elite-ai-assisted-coding.dev/static/CursorRulesOptions.png" class="img-fluid figure-img"></p>
<figcaption>Cursor Rules Options</figcaption>
</figure>
</div>
<ul>
<li><strong>Always Apply</strong> - Core rules that should never be violated</li>
<li><strong>Apply Manually</strong> - Rules you trigger when needed. If you’re really bad at thinking about context, and you’re not going to put a lot of effort in then don’t use this.</li>
<li><strong>Apply Intelligently</strong> - This is a great thing to use and provide a good description for the agent to know when to use it.</li>
<li><strong>Apply to Specific Files</strong> - File-type or path-specific rules. This can be nice, but you’re liable to set it to a path, restructure something, then forget and this rule will be acidentally deprecated. This is useful in a decently mature code base, or with very general paths like <code>src</code> or <code>docs</code> directory that are not likely to change.</li>
</ul>
</section>
</section>
<section id="additional-features" class="level1">
<h1>Additional Features</h1>
<ul>
<li>Background Agents: These are great to bring some of what you do in cursor for easier tasks to run in parallel</li>
<li>Slack/Github Integration: A nice features to do additional tasks and ask cursor to work on things from Slack or from a github repo. I didn’t find it as useful for actual coding things, as I found going to the IDE, adding additional context and thinking about the task instructions for formulate payed dividends. But for writing tasks it was a great easy starting point!</li>
</ul>


</section>

 ]]></description>
  <category>IDE</category>
  <guid>https://elite-ai-assisted-coding.dev/tools-review/cursor.html</guid>
  <pubDate>Tue, 22 Jul 2025 04:00:00 GMT</pubDate>
  <media:content url="https://elite-ai-assisted-coding.dev/static/CursorToolReview.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>
